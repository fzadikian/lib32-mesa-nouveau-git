From c511d5f11817c8d501216cdad42ee35d554413c6 Mon Sep 17 00:00:00 2001
From: Mike Blumenkrantz <michael.blumenkrantz@gmail.com>
Date: Mon, 22 Jul 2024 19:18:00 -0400
Subject: [PATCH] dril: rework config selection

this should be more useful
---
 src/gallium/targets/dril/dril_target.c | 111 ++++++++++++++++++-------
 1 file changed, 81 insertions(+), 30 deletions(-)

diff --git a/src/gallium/targets/dril/dril_target.c b/src/gallium/targets/dril/dril_target.c
index 3b854396c8dbe..b17edab981434 100644
--- a/src/gallium/targets/dril/dril_target.c
+++ b/src/gallium/targets/dril/dril_target.c
@@ -26,6 +26,7 @@
 #include <EGL/egl.h>
 #include <EGL/eglext.h>
 #include "gbm/main/gbm.h"
+#include "drm-uapi/drm_fourcc.h"
 
 #define EGL_PLATFORM_GBM_MESA             0x31D7
 
@@ -33,28 +34,42 @@
 #define GLX_NONE 0x8000
 #define GLX_DONT_CARE 0xFFFFFFFF
 
-#define CONFIG_DB(color, zs, doublebuffer) \
+#define CONFIG(color, zs) \
    { \
       .color_format = color, \
       .zs_format = zs, \
-      .doubleBufferMode = doublebuffer, \
    }
-#define CONFIG(color, zs) \
-   CONFIG_DB(color, zs, GL_TRUE), \
-   CONFIG_DB(color, zs, GL_FALSE)
 
 static const struct gl_config drilConfigs[] = {
    CONFIG(PIPE_FORMAT_R8G8B8A8_UNORM, PIPE_FORMAT_S8_UINT),
    CONFIG(PIPE_FORMAT_R8G8B8A8_UNORM, PIPE_FORMAT_Z24_UNORM_S8_UINT),
+   CONFIG(PIPE_FORMAT_R8G8B8A8_UNORM, PIPE_FORMAT_Z24X8_UNORM),
+   CONFIG(PIPE_FORMAT_R8G8B8A8_UNORM, PIPE_FORMAT_Z16_UNORM),
    CONFIG(PIPE_FORMAT_R8G8B8A8_UNORM, PIPE_FORMAT_NONE),
    CONFIG(PIPE_FORMAT_R8G8B8X8_UNORM, PIPE_FORMAT_S8_UINT),
    CONFIG(PIPE_FORMAT_R8G8B8X8_UNORM, PIPE_FORMAT_Z24_UNORM_S8_UINT),
+   CONFIG(PIPE_FORMAT_R8G8B8X8_UNORM, PIPE_FORMAT_Z24X8_UNORM),
+   CONFIG(PIPE_FORMAT_R8G8B8X8_UNORM, PIPE_FORMAT_Z16_UNORM),
    CONFIG(PIPE_FORMAT_R8G8B8X8_UNORM, PIPE_FORMAT_NONE),
+   CONFIG(PIPE_FORMAT_B8G8R8A8_UNORM, PIPE_FORMAT_S8_UINT),
+   CONFIG(PIPE_FORMAT_B8G8R8A8_UNORM, PIPE_FORMAT_Z24_UNORM_S8_UINT),
+   CONFIG(PIPE_FORMAT_B8G8R8A8_UNORM, PIPE_FORMAT_Z24X8_UNORM),
+   CONFIG(PIPE_FORMAT_B8G8R8A8_UNORM, PIPE_FORMAT_Z16_UNORM),
+   CONFIG(PIPE_FORMAT_B8G8R8A8_UNORM, PIPE_FORMAT_NONE),
+   CONFIG(PIPE_FORMAT_B8G8R8X8_UNORM, PIPE_FORMAT_S8_UINT),
+   CONFIG(PIPE_FORMAT_B8G8R8X8_UNORM, PIPE_FORMAT_Z24_UNORM_S8_UINT),
+   CONFIG(PIPE_FORMAT_B8G8R8X8_UNORM, PIPE_FORMAT_Z24X8_UNORM),
+   CONFIG(PIPE_FORMAT_B8G8R8X8_UNORM, PIPE_FORMAT_Z16_UNORM),
+   CONFIG(PIPE_FORMAT_B8G8R8X8_UNORM, PIPE_FORMAT_NONE),
    CONFIG(PIPE_FORMAT_R10G10B10A2_UNORM, PIPE_FORMAT_S8_UINT),
    CONFIG(PIPE_FORMAT_R10G10B10A2_UNORM, PIPE_FORMAT_Z24_UNORM_S8_UINT),
+   CONFIG(PIPE_FORMAT_R10G10B10A2_UNORM, PIPE_FORMAT_Z24X8_UNORM),
+   CONFIG(PIPE_FORMAT_R10G10B10A2_UNORM, PIPE_FORMAT_Z16_UNORM),
    CONFIG(PIPE_FORMAT_R10G10B10A2_UNORM, PIPE_FORMAT_NONE),
    CONFIG(PIPE_FORMAT_R10G10B10X2_UNORM, PIPE_FORMAT_S8_UINT),
    CONFIG(PIPE_FORMAT_R10G10B10X2_UNORM, PIPE_FORMAT_Z24_UNORM_S8_UINT),
+   CONFIG(PIPE_FORMAT_R10G10B10X2_UNORM, PIPE_FORMAT_Z24X8_UNORM),
+   CONFIG(PIPE_FORMAT_R10G10B10X2_UNORM, PIPE_FORMAT_Z16_UNORM),
    CONFIG(PIPE_FORMAT_R10G10B10X2_UNORM, PIPE_FORMAT_NONE),
    CONFIG(PIPE_FORMAT_R5G6B5_UNORM, PIPE_FORMAT_S8_UINT),
    CONFIG(PIPE_FORMAT_R5G6B5_UNORM, PIPE_FORMAT_Z16_UNORM),
@@ -272,6 +287,30 @@ drilCreateNewDrawable(__DRIscreen *psp,
    return NULL;
 }
 
+
+static enum pipe_format
+fourcc_to_pipe_format(int fourcc)
+{
+   switch (fourcc) {
+   case DRM_FORMAT_RGB565: return PIPE_FORMAT_B5G6R5_UNORM;
+   case DRM_FORMAT_XRGB8888: return PIPE_FORMAT_BGRX8888_UNORM;
+   case DRM_FORMAT_ARGB8888: return PIPE_FORMAT_BGRA8888_UNORM;
+   case DRM_FORMAT_ABGR8888: return PIPE_FORMAT_RGBA8888_UNORM;
+   case DRM_FORMAT_XBGR8888: return PIPE_FORMAT_RGBX8888_UNORM;
+   case DRM_FORMAT_XRGB2101010: return PIPE_FORMAT_B10G10R10X2_UNORM;
+   case DRM_FORMAT_ARGB2101010: return PIPE_FORMAT_B10G10R10A2_UNORM;
+   case DRM_FORMAT_XBGR2101010: return PIPE_FORMAT_R10G10B10X2_UNORM;
+   case DRM_FORMAT_ABGR2101010: return PIPE_FORMAT_R10G10B10A2_UNORM;
+   case DRM_FORMAT_XBGR16161616F: return PIPE_FORMAT_R16G16B16A16_FLOAT;
+   case DRM_FORMAT_ABGR16161616F: return PIPE_FORMAT_R16G16B16X16_FLOAT;
+   case DRM_FORMAT_ARGB1555: return PIPE_FORMAT_B5G5R5A1_UNORM;
+   case DRM_FORMAT_ABGR1555: return PIPE_FORMAT_R5G5B5A1_UNORM;
+   case DRM_FORMAT_ARGB4444: return PIPE_FORMAT_B4G4R4A4_UNORM;
+   case DRM_FORMAT_ABGR4444: return PIPE_FORMAT_R4G4B4A4_UNORM;
+   default:                             return PIPE_FORMAT_NONE;
+   }
+}
+
 #define NUM_SAMPLE_COUNTS 7
 
 /* DRI2 awfulness */
@@ -290,7 +329,8 @@ init_dri2_configs(int fd, const __DRIconfig **configs)
    EGLDisplay (*peglGetPlatformDisplayEXT)(EGLenum, void *, const EGLint *) = peglGetProcAddress("eglGetPlatformDisplayEXT");
    EGLDisplay (*peglInitialize)(EGLDisplay, int*, int*) = peglGetProcAddress("eglInitialize");
    void (*peglTerminate)(EGLDisplay) = peglGetProcAddress("eglTerminate");
-   EGLBoolean (*peglChooseConfig)(EGLDisplay, EGLint const *, EGLConfig *, EGLint, EGLint*) = peglGetProcAddress("eglChooseConfig");
+   EGLBoolean (*peglGetConfigs)(EGLDisplay, EGLConfig*, EGLint, EGLint*) = peglGetProcAddress("eglGetConfigs");
+   EGLBoolean (*peglGetConfigAttrib)(EGLDisplay, EGLConfig, EGLint, EGLint *) = peglGetProcAddress("eglGetConfigAttrib");
 
    /* try opening GBM for hardware driver info */
    struct gbm_device *gbm = gbm_create_device(fd);
@@ -305,39 +345,50 @@ init_dri2_configs(int fd, const __DRIconfig **configs)
    if (!peglInitialize(dpy, &maj, &min))
       goto out_gbm;
 
-   unsigned c = 0;
+   int num_configs = 0;
+   EGLConfig *eglconfigs = NULL;
+   unsigned num_samples[] = {
+      0, 2, 4, 6, 8, 16, 32
+   };
+   static_assert(ARRAY_SIZE(num_samples) == NUM_SAMPLE_COUNTS, "sample count define needs updating");
+   if (!peglGetConfigs(dpy, NULL, 0, &num_configs))
+      goto out_egl;
+   eglconfigs = malloc(sizeof(EGLConfig) * num_configs);
+   if (!peglGetConfigs(dpy, eglconfigs, num_configs, &num_configs))
+      goto out_egl;
 
-   /* iterate over base configs and check for multisample support */
-   for (unsigned i = 0; i < ARRAY_SIZE(drilConfigs); i++) {
-      unsigned num_samples[] = {
-         0, 2, 4, 6, 8, 16, 32
-      };
-      static_assert(ARRAY_SIZE(num_samples) == NUM_SAMPLE_COUNTS, "sample count define needs updating");
-      for (unsigned j = 0; j < ARRAY_SIZE(num_samples); j++) {
-         const EGLint config_attribs[] = {
-            EGL_RED_SIZE,           SIZE(drilConfigs[i].color_format, RGB, 0),
-            EGL_GREEN_SIZE,         SIZE(drilConfigs[i].color_format, RGB, 1),
-            EGL_BLUE_SIZE,          SIZE(drilConfigs[i].color_format, RGB, 2),
-            EGL_ALPHA_SIZE,         SIZE(drilConfigs[i].color_format, RGB, 3),
-            EGL_DEPTH_SIZE,         SIZE(drilConfigs[i].zs_format, ZS, 0),
-            EGL_STENCIL_SIZE,       SIZE(drilConfigs[i].zs_format, ZS, 1),
-            EGL_SAMPLES,            num_samples[j],
-            EGL_NONE
-         };
-         int num_configs = 0;
-         if (peglChooseConfig(dpy, config_attribs, NULL, 0, &num_configs) && num_configs) {
-            /* only copy supported configs */
-            configs[c] = mem_dup(&drilConfigs[i], sizeof(drilConfigs[i]));
+   unsigned c = 0;
+   for (unsigned i = 0; i < num_configs; i++) {
+      /* verify that this is the right format */
+      EGLint format, depth, stencil, samples;
+      if (!peglGetConfigAttrib(dpy, eglconfigs[i], EGL_NATIVE_VISUAL_ID, &format) ||
+          !peglGetConfigAttrib(dpy, eglconfigs[i], EGL_DEPTH_SIZE, &depth) ||
+          !peglGetConfigAttrib(dpy, eglconfigs[i], EGL_STENCIL_SIZE, &stencil) ||
+          !peglGetConfigAttrib(dpy, eglconfigs[i], EGL_SAMPLES, &samples))
+         continue;
+      enum pipe_format pformat = fourcc_to_pipe_format(format);
+      for (unsigned j = 0; j < ARRAY_SIZE(drilConfigs); j++) {
+         unsigned depth_size = SIZE(drilConfigs[j].zs_format, ZS, 0);
+         unsigned stencil_size = SIZE(drilConfigs[j].zs_format, ZS, 1);
+         if (pformat != drilConfigs[j].color_format || depth != depth_size || stencil != stencil_size)
+            continue;
+
+         /* only copy supported configs */
+         for (unsigned k = 0; k < 2; k++) {
+            configs[c] = mem_dup(&drilConfigs[j], sizeof(drilConfigs[j]));
 
             /* hardcoded configs have samples=0, need to update */
             struct gl_config *cfg = (void*)configs[c];
-            cfg->samples = num_samples[j];
+            cfg->samples = samples;
+            cfg->doubleBufferMode = k;
             ret = true;
             c++;
          }
+         break;
       }
    }
-
+out_egl:
+   free(eglconfigs);
    /* don't forget cleanup */
    peglTerminate(dpy);
 
-- 
GitLab

